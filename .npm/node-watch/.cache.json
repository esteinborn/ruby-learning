{"_id":"node-watch","_rev":"46-a9821b978a57c232068305a6edc91eca","name":"node-watch","description":"fs.watch() wrapper of Nodejs ","dist-tags":{"latest":"0.3.4"},"versions":{"0.1.0":{"name":"node-watch","description":"A file watcher utility for nodeJS","version":"0.1.0","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"_npmUser":{"name":"yuanchuan","email":"yuanchuan23@gmail.com"},"_id":"node-watch@0.1.0","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.17","_defaultsLoaded":true,"dist":{"shasum":"761d3d385a3b4bf70ef12a01f85f9f92643fae44","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.1.0.tgz","noattachment":true},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.1.1":{"name":"node-watch","version":"0.1.1","description":"A file watcher utility for nodeJS","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"lib/watch.js","keywords":["nodewatch","watch","watchfile"],"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"_npmUser":{"name":"yuanchuan","email":"yuanchuan23@gmail.com"},"_id":"node-watch@0.1.1","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.17","_defaultsLoaded":true,"dist":{"shasum":"c0306dcd8fd68db66923b06d79d1106db2ee5135","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.1.1.tgz"},"scripts":{},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.2.0":{"name":"node-watch","version":"0.2.0","description":"NodeJS file.watch wrapper","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"_npmUser":{"name":"yuanchuan","email":"yuanchuan23@gmail.com"},"_id":"node-watch@0.2.0","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"48d6942c982448c421bbe4173b92043313376d70","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.2.0.tgz"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.2.1":{"name":"node-watch","version":"0.2.1","description":"NodeJS file.watch wrapper","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"_npmUser":{"name":"yuanchuan","email":"yuanchuan23@gmail.com"},"_id":"node-watch@0.2.1","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.8.1","_defaultsLoaded":true,"dist":{"shasum":"5095767cb97ce2c3c6ce1824f1d30bbb3fd0af05","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.2.1.tgz"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.2.2":{"name":"node-watch","version":"0.2.2","description":"NodeJS file.watch wrapper","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"readme":"#Node-watch\n\nThis program is part of Markab(an instant mockup tool, still under development). \n\nThe difference bewteen other nodewatch tools is that it does not differentiate event like \"rename\" or \"delete\". Once there is a change, the callback function will be triggered.\n\n##Feature\n\n*Recursively watch a directory*\n\n##Installation\n\n    npm install node-watch\n\n## Example\n\n    var watch = require('node-watch');\n\n    watch('somedir', function(filename) {\n      console.log(filename, ' changed.');\n    });\n\n","_id":"node-watch@0.2.2","dist":{"shasum":"3a31121529852725a3465152bc5d910c0e4e7e5e","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.2.2.tgz"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.2.3":{"name":"node-watch","version":"0.2.3","description":"NodeJS file.watch wrapper","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"readme":"#Node-watch\n\nThis program is part of Markab(an instant mockup tool, still under development). \n\nThe difference bewteen other nodewatch tools is that it does not differentiate event like \"rename\" or \"delete\". Once there is a change, the callback function will be triggered.\n\n##Feature\n\n*Recursively watch a directory*\n\n##Installation\n\n    npm install node-watch\n\n## Example\n\n    var watch = require('node-watch');\n\n    watch('somedir', function(filename) {\n      console.log(filename, ' changed.');\n    });\n\n","_id":"node-watch@0.2.3","dist":{"shasum":"b735cb0fe4af7ad4900f77a6ba175dd01de78c0c","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.2.3.tgz"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.2.4":{"name":"node-watch","version":"0.2.4","description":"fs.watch() wrapper of Nodejs ","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"readme":"#Node-watch\n\nThere are 3 problems when using the native fs.watch() function of Nodejs: \n\n1. It won't watch a directory recursively.\n2. When modifying a file inside a watched directory, the callback function will be triggered multiple times. \n3. when modifying a watched file with an editor like vim, the callback function will only be triggered one time and then it is unwatched.\n\nAnd this module is trying to solve those problems. \n\n(In current version it does not differentiate event like \"rename\" or \"delete\". Once there is a change, the callback function will be triggered.)\n\n## Installation\n\n    npm install node-watch\n\n## Example\n\n    var watch = require('node-watch');\n\n    watch('somedir', function(filename) {\n      console.log(filename, ' changed.');\n    });\n\n","_id":"node-watch@0.2.4","dist":{"shasum":"87453d13ad4628bd47077321163e34416ea7b874","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.2.4.tgz"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.2.5":{"name":"node-watch","version":"0.2.5","description":"fs.watch() wrapper of Nodejs ","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"readme":"#Node-watch\n\nThis module will watch a directory recursively by default while trying to solve several problems caused by the native fs.watch():\n\n\n1. When modifying a file inside a watched directory, the callback function will be triggered multiple times; \n2. when modifying a watched file with an editor like vim, the callback function will only be triggered one time and then it is unwatched.\n\n\nIn current version it does not differentiate event like \"rename\" or \"delete\". Once there is a change, the callback function will be triggered.\n\n## Installation\n\n    npm install node-watch\n\n## Example\n\n    var watch = require('node-watch');\n\n    watch('somedir_or_somefile', function(filename) {\n      console.log(filename, ' changed.');\n    });\n\n","_id":"node-watch@0.2.5","dist":{"shasum":"2e4d43be566b83ef5d7f61f6aa6965762a06b74e","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.2.5.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"yuanchuan","email":"yuanchuan23@gmail.com"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.2.6":{"name":"node-watch","version":"0.2.6","description":"fs.watch() wrapper of Nodejs ","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"readme":"#Node-watch\n\nThis module will watch a directory recursively by default while trying to solve several problems caused by the native fs.watch():\n\n\n1. When modifying a file inside a watched directory, the callback function will be triggered multiple times; \n2. when modifying a watched file with an editor like vim, the callback function will only be triggered one time and then it is unwatched.\n\n\nIn current version it does not differentiate event like \"rename\" or \"delete\". Once there is a change, the callback function will be triggered.\n\n## Installation\n\n    npm install node-watch\n\n## Example\n\n    var watch = require('node-watch');\n\n    watch('somedir_or_somefile', function(filename) {\n      console.log(filename, ' changed.');\n    });\n\n","readmeFilename":"README.md","_id":"node-watch@0.2.6","dist":{"shasum":"d4fe7fee4d5ad05e876fde42f681d6d0b3491399","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.2.6.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"yuanchuan","email":"yuanchuan23@gmail.com"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.2.7":{"name":"node-watch","version":"0.2.7","description":"fs.watch() wrapper of Nodejs ","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"readme":"#Node-watch\n\nThis module will watch a directory recursively by default while trying to solve several problems caused by the native fs.watch():\n\n\n1. When modifying a file inside a watched directory, the callback function will be triggered multiple times; \n2. when modifying a watched file with an editor like vim, the callback function will only be triggered one time and then it is unwatched.\n\n\nIn current version it does not differentiate event like \"rename\" or \"delete\". Once there is a change, the callback function will be triggered.\n\n## Installation\n\n    npm install node-watch\n\n## Example\n\n    var watch = require('node-watch');\n\n    watch('somedir_or_somefile', function(filename) {\n      console.log(filename, ' changed.');\n    });\n\n","_id":"node-watch@0.2.7","dist":{"shasum":"18f2bff18d689dcdc5a701e2340d4537d989a3ab","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.2.7.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"yuanchuan","email":"yuanchuan23@gmail.com"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.2.8":{"name":"node-watch","version":"0.2.8","description":"fs.watch() wrapper of Nodejs ","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"readme":"#Node-watch\n\nThis module will watch a directory recursively by default while trying to solve several problems caused by the native fs.watch():\n\n\n1. When modifying a file inside a watched directory, the callback function will be triggered multiple times; \n2. when modifying a watched file with an editor like vim, the callback function will only be triggered one time and then it is unwatched.\n\n\nIn current version it does not differentiate event like \"rename\" or \"delete\". Once there is a change, the callback function will be triggered.\n\n## Installation\n\n    npm install node-watch\n\n## Example\n\n    var watch = require('node-watch');\n\n    watch('somedir_or_somefile', function(filename) {\n      console.log(filename, ' changed.');\n    });\n\n","_id":"node-watch@0.2.8","dist":{"shasum":"b387743697ae796675cec34d04cf69392e3d6947","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.2.8.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"yuanchuan","email":"yuanchuan23@gmail.com"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.2.9":{"name":"node-watch","version":"0.2.9","description":"fs.watch() wrapper of Nodejs ","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"readme":"#Node-watch\n\nThis module will watch a directory recursively by default while trying to solve several problems caused by the native fs.watch():\n\n\n1. When modifying a file inside a watched directory, the callback function will be triggered multiple times; \n2. when modifying a watched file with an editor like vim, the callback function will only be triggered one time and then it is unwatched.\n\n\nIn current version it does not differentiate event like \"rename\" or \"delete\". Once there is a change, the callback function will be triggered.\n\n### Installation\n\n```bash\nnpm install node-watch\n```\n\n### Example\n\n```js\nvar watch = require('node-watch');\n\nwatch('somedir_or_somefile', function(filename) {\n  console.log(filename, ' changed.');\n});\n```\n\n### Options\n\n  `recursive`: [ true | fase ]  --  If watch recursively or not. True by default.\n\n```js\nwatch('somedir', { recursive: false }, function(filename) {\n  console.log(filename, ' changed.');\n});\n```\n","readmeFilename":"README.md","_id":"node-watch@0.2.9","dist":{"shasum":"1414f5ccaf8500fdde0ffad662b2e2438bf31b04","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.2.9.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"yuanchuan","email":"yuanchuan23@gmail.com"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.3.0":{"name":"node-watch","version":"0.3.0","description":"fs.watch() wrapper of Nodejs ","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"bugs":{"url":"https://github.com/yuanchuan/node-watch/issues"},"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"readme":"#Node-watch\n\nThis module will watch a directory **recursively** by default while trying to solve several problems when using the native [fs.watch()](http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener):\n\n1. When modifying a file inside a watched directory, the callback function will be triggered multiple times caused by junkie files generated by the editor; \n2. when modifying a watched single file, the callback function will only be triggered one time and then it is unwatched.\n\nIn current version it does not differentiate event like \"rename\" or \"delete\". Once there is a change, the callback function will be triggered.\n\n### Installation\n\n```bash\nnpm install node-watch\n```\n\n### Example\n\n```js\nvar watch = require('node-watch');\n\nwatch('somedir_or_somefile', function(filename) {\n  console.log(filename, ' changed.');\n});\n```\n\n### Options\n\n`recursive`:Watch it recursively or not (defaults to **true**). \n\n`followSymLinks`: Follow symbolic links or not (defaults to **false**).\n\n`maxSymLevel`: The max number of following symbolic links, in order to prevent circular links (defaults to **3**). \n\n\n#### Usage\n\n```js\nwatch('somedir', { recursive: false, followSymLinks: true }, function(filename) {\n  console.log(filename, ' changed.');\n});\n```\n","readmeFilename":"README.md","_id":"node-watch@0.3.0","dist":{"shasum":"acac7d1418b04d1d8460d94f03497bac434d4dc8","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.3.0.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"yuanchuan","email":"yuanchuan23@gmail.com"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.3.1":{"name":"node-watch","version":"0.3.1","description":"fs.watch() wrapper of Nodejs ","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"bugs":{"url":"https://github.com/yuanchuan/node-watch/issues"},"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"readme":"#Node-watch\nA [fs.watch](http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener) wrapper to watch files or directories(recursively by default).  \n\n\n### Installation\n\n```bash\nnpm install node-watch\n```\n\n \n\n### Example\n\n```js\nvar watch = require('node-watch');\n\nwatch('somedir_or_somefile', function(filename) {\n  console.log(filename, ' changed.');\n});\n``` \n\n### Why fs.watch wrapper\n\n* Some editors will generate temporary files which will cause the callback function to trigger multiple times.\n* when watching a single file, the callback function will only be triggered one time and then the file is unwatched.\n* Missing an option to watch a directory recursively.\n \n \n\n\n### The difference\nThis module **currently** does not differentiate event like `rename` or `delete`. Once there is a change, the callback function will be triggered.\n\n\n\n## Options\n\n`recursive`:Watch it recursively or not (defaults to **true**). \n\n`followSymLinks`: Follow symbolic links or not (defaults to **false**).\n\n`maxSymLevel`: The max number of following symbolic links, in order to prevent circular links (defaults to **1**). \n\n\n```js\nwatch('somedir', { recursive: false, followSymLinks: true }, function(filename) {\n  console.log(filename, ' changed.');\n});\n```\n\n##FAQ\n\n\n### 1. How to watch mutiple files or directories.\n\n```js\nwatch(['file1', 'file2'], function(file) {\n  //\n});\n```\n\n### 2. How to filter files\n\nWrite your own filter function as a high order function. For example:\n\n```js\nvar filter = function(pattern, fn) {\n  return function(filename) {\n    if (pattern.test(filename)) {\n      fn(filename):\n    }\n  }\n}\n\n// only watch for js files\nwatch('mydir', filter(/\\.js$/, function(filename) {\n \n}));\n```\n","readmeFilename":"README.md","_id":"node-watch@0.3.1","dist":{"shasum":"856e5c440a4be3b6bc96ba3445d14f1c42f44866","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.3.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"yuanchuan","email":"yuanchuan23@gmail.com"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.3.2":{"name":"node-watch","version":"0.3.2","description":"fs.watch() wrapper of Nodejs ","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"bugs":{"url":"https://github.com/yuanchuan/node-watch/issues"},"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"readme":"#Node-watch\nA [fs.watch](http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener) wrapper to watch files or directories(recursively by default).  \n\n\n### Installation\n\n```bash\nnpm install node-watch\n```\n\n### Example\n\n```js\nvar watch = require('node-watch');\n\nwatch('somedir_or_somefile', function(filename) {\n  console.log(filename, ' changed.');\n});\n``` \n\n### Why fs.watch wrapper\n\n* Some editors will generate temporary files which will cause the callback function to be triggered multiple times.\n* when watching a single file the callback function will only be triggered one time and then is seem to be unwatched.\n* Missing an option to watch a directory recursively.\n \n \n### The difference\nThis module **currently** does not differentiate event like `rename` or `delete`. Once there is a change, the callback function will be triggered.\n\n\n### Options\n\n`recursive`:Watch it recursively or not (defaults to **true**). \n\n`followSymLinks`: Follow symbolic links or not (defaults to **false**).\n\n`maxSymLevel`: The max number of following symbolic links, in order to prevent circular links (defaults to **1**). \n\n\n```js\nwatch('somedir', { recursive: false, followSymLinks: true }, function(filename) {\n  console.log(filename, ' changed.');\n});\n```\n\n###FAQ\n\n#### 1. How to watch mutiple files or directories\n\n```js\nwatch(['file1', 'file2'], function(file) {\n  //\n});\n```\n\n#### 2. How to filter files\n\nWrite your own filter function as a higher-order function. For example:\n\n```js\nvar filter = function(pattern, fn) {\n  return function(filename) {\n    if (pattern.test(filename)) {\n      fn(filename);\n    }\n  }\n}\n\n// only watch for js files\nwatch('mydir', filter(/\\.js$/, function(filename) {\n  // \n}));\n```\n","readmeFilename":"README.md","_id":"node-watch@0.3.2","dist":{"shasum":"bafd0f57334d8664face2b772037192f0b3f4f31","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.3.2.tgz"},"_from":".","_npmVersion":"1.2.17","_npmUser":{"name":"yuanchuan","email":"yuanchuan23@gmail.com"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.3.3":{"name":"node-watch","version":"0.3.3","description":"fs.watch() wrapper of Nodejs ","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"bugs":{"url":"https://github.com/yuanchuan/node-watch/issues"},"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"readme":"#Node-watch\nA [fs.watch](http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener) wrapper to watch files or directories(recursively by default).  \n\n\n### Installation\n\n```bash\nnpm install node-watch\n```\n\n### Example\n\n```js\nvar watch = require('node-watch');\n\nwatch('somedir_or_somefile', function(filename) {\n  console.log(filename, ' changed.');\n});\n``` \n\n### Why fs.watch wrapper\n\n* Some editors will generate temporary files which will cause the callback function to be triggered multiple times.\n* when watching a single file the callback function will only be triggered one time and then is seem to be unwatched.\n* Missing an option to watch a directory recursively.\n \n \n### The difference\nThis module **currently** does not differentiate event like `rename` or `delete`. Once there is a change, the callback function will be triggered.\n\n\n### Options\n\n`recursive`:Watch it recursively or not (defaults to **true**). \n\n`followSymLinks`: Follow symbolic links or not (defaults to **false**).\n\n`maxSymLevel`: The max number of following symbolic links, in order to prevent circular links (defaults to **1**). \n\n\n```js\nwatch('somedir', { recursive: false, followSymLinks: true }, function(filename) {\n  console.log(filename, ' changed.');\n});\n```\n\n###FAQ\n\n#### 1. How to watch mutiple files or directories\n\n```js\nwatch(['file1', 'file2'], function(file) {\n  //\n});\n```\n\n#### 2. How to filter files\n\nWrite your own filter function as a higher-order function. For example:\n\n```js\nvar filter = function(pattern, fn) {\n  return function(filename) {\n    if (pattern.test(filename)) {\n      fn(filename);\n    }\n  }\n}\n\n// only watch for js files\nwatch('mydir', filter(/\\.js$/, function(filename) {\n  // \n}));\n```\n","readmeFilename":"README.md","_id":"node-watch@0.3.3","dist":{"shasum":"e6c3d16a70637f616146cb3d7168e610221e3dfc","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.3.3.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"yuanchuan","email":"yuanchuan23@gmail.com"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}},"0.3.4":{"name":"node-watch","version":"0.3.4","description":"fs.watch() wrapper of Nodejs ","url":"https://github.com/yuanchuan/node-watch","author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"main":"./lib/watch.js","keywords":["nodewatch","watch","watchfile"],"bugs":{"url":"https://github.com/yuanchuan/node-watch/issues"},"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"readme":"#Node-watch\nA [fs.watch](http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener) wrapper to watch files or directories(recursively by default).  \n\n\n### Installation\n\n```bash\nnpm install node-watch\n```\n\n### Example\n\n```js\nvar watch = require('node-watch');\n\nwatch('somedir_or_somefile', function(filename) {\n  console.log(filename, ' changed.');\n});\n``` \n\n### Why fs.watch wrapper\n\n* Some editors will generate temporary files which will cause the callback function to be triggered multiple times.\n* when watching a single file the callback function will only be triggered one time and then is seem to be unwatched.\n* Missing an option to watch a directory recursively.\n \n \n### The difference\nThis module **currently** does not differentiate event like `rename` or `delete`. Once there is a change, the callback function will be triggered.\n\n\n### Options\n\n`recursive`:Watch it recursively or not (defaults to **true**). \n\n`followSymLinks`: Follow symbolic links or not (defaults to **false**).\n\n`maxSymLevel`: The max number of following symbolic links, in order to prevent circular links (defaults to **1**). \n\n\n```js\nwatch('somedir', { recursive: false, followSymLinks: true }, function(filename) {\n  console.log(filename, ' changed.');\n});\n```\n\n###FAQ\n\n#### 1. How to watch mutiple files or directories\n\n```js\nwatch(['file1', 'file2'], function(file) {\n  //\n});\n```\n\n#### 2. How to filter files\n\nWrite your own filter function as a higher-order function. For example:\n\n```js\nvar filter = function(pattern, fn) {\n  return function(filename) {\n    if (pattern.test(filename)) {\n      fn(filename);\n    }\n  }\n}\n\n// only watch for js files\nwatch('mydir', filter(/\\.js$/, function(filename) {\n  // \n}));\n```\n","readmeFilename":"README.md","_id":"node-watch@0.3.4","dist":{"shasum":"755f64ef5f8ad4acb5bafd2c4e7f4fb6a8db0214","tarball":"http://registry.npmjs.org/node-watch/-/node-watch-0.3.4.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"yuanchuan","email":"yuanchuan23@gmail.com"},"maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"directories":{}}},"readme":"#Node-watch\n\nThis program is part of Markab(an instant mockup tool, still under development). \n\nThe difference bewteen other nodewatch tools is that it does not differentiate event like \"rename\" or \"delete\". Once there is a change, the callback function will be triggered.\n\n##Feature\n\n*Recursively watch a directory*\n\n\n## Example\n\n    var watch = require('node-watch');\n\n    watch('somedir', function(filename) {\n      console.log(filename, ' changed.');\n    });\n\n","maintainers":[{"name":"yuanchuan","email":"yuanchuan23@gmail.com"}],"time":{"0.1.0":"2012-05-20T14:54:23.183Z","0.1.1":"2012-05-21T02:10:53.041Z","0.2.0":"2012-06-21T03:08:59.722Z","0.2.1":"2012-07-04T06:56:35.228Z","0.2.2":"2012-07-05T15:34:57.153Z","0.2.3":"2012-07-06T16:41:02.722Z","0.2.4":"2012-07-15T08:11:13.396Z","0.2.5":"2012-12-25T13:36:35.091Z","0.2.6":"2013-01-29T03:59:48.300Z","0.2.7":"2013-02-25T16:39:33.188Z","0.2.8":"2013-02-26T02:14:30.193Z","0.2.9":"2013-03-05T09:07:53.045Z","0.3.0":"2013-03-09T07:05:59.359Z","0.3.1":"2013-03-21T06:52:08.205Z","0.3.2":"2013-04-10T15:17:47.670Z","0.3.3":"2013-04-17T01:11:25.635Z","0.3.4":"2013-06-23T16:15:13.004Z"},"author":{"name":"yuanchuan","email":"yuanchuan23@gmail.com","url":"http://yuanchuan.name"},"repository":{"type":"git","url":"git://github.com/yuanchuan/node-watch.git"},"users":{"lexa":true},"_attachments":{"node-watch-0.3.4.tgz":{"content_type":"application/octet-stream","revpos":43,"digest":"md5-dbwgHM2ZjVCiyeFMC80CGw==","length":3760,"stub":true},"node-watch-0.3.3.tgz":{"content_type":"application/octet-stream","revpos":41,"digest":"md5-XK1RX0bk/DjLi0xpKUOHvg==","length":3758,"stub":true},"node-watch-0.3.2.tgz":{"content_type":"application/octet-stream","revpos":39,"digest":"md5-lERhhqZL+7JobvieKDRBRA==","length":3758,"stub":true},"node-watch-0.3.1.tgz":{"content_type":"application/octet-stream","revpos":37,"digest":"md5-XBYz6oZHEf8XrW4SQRC6lQ==","length":3758,"stub":true},"node-watch-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":36,"digest":"md5-Q54+F+UHmY7ewME+2LEZOg==","length":3660,"stub":true},"node-watch-0.2.9.tgz":{"content_type":"application/octet-stream","revpos":34,"digest":"md5-Mc/KQKjto1PYhVsbn7xE/w==","length":3219,"stub":true},"node-watch-0.2.8.tgz":{"content_type":"application/octet-stream","revpos":32,"digest":"md5-5QlQdwPfApJJHsVy10ih5g==","length":2856,"stub":true},"node-watch-0.2.7.tgz":{"content_type":"application/octet-stream","revpos":30,"digest":"md5-Ou2DlZLLvfSguOmCeOG8eg==","length":2849,"stub":true},"node-watch-0.2.6.tgz":{"content_type":"application/octet-stream","revpos":28,"digest":"md5-iR8QHbfBKlmTHAOg6nrdTg==","length":2827,"stub":true},"node-watch-0.2.5.tgz":{"content_type":"application/octet-stream","revpos":26,"digest":"md5-lxt2oIsAiMCLQRmFwBtU6g==","length":2798,"stub":true},"node-watch-0.2.4.tgz":{"content_type":"application/octet-stream","revpos":24,"digest":"md5-EFz7XyFLSP0gN9QL0K4R8w==","length":2807,"stub":true},"node-watch-0.2.3.tgz":{"content_type":"application/octet-stream","revpos":22,"digest":"md5-cReBXD0DYLUALnDhHLccfQ==","length":2730,"stub":true},"node-watch-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":20,"digest":"md5-nIn/CCvDSwRNuwiFwgiwRg==","length":2586,"stub":true},"node-watch-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":18,"digest":"md5-KkcWYOV8pAkOVPo6hxIu9g==","length":2574,"stub":true},"node-watch-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":16,"digest":"md5-Vl4B40EiiShRTyF4L2pTNw==","length":2748,"stub":true},"node-watch-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":14,"digest":"md5-s25JPOCvItQSWvj8z8dEyA==","length":2625,"stub":true}},"_etag":"\"8Z05M5BXK72R5OXZ5N4F7BZB2\""}